{"version":3,"file":"static/js/146.d0425b79.chunk.js","mappings":"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","sources":["components/ContactListItem/ContactListItem.jsx","redux/contacts/contactsSelectors.js","components/ContactList/ContactList.jsx","components/Container/Container.jsx","components/Filter/Filter.jsx","components/Notification/Notification.jsx","../node_modules/nanoid/index.browser.js","components/ContactsForm/ContactsForm.jsx","pages/ContactsPage/ContactsPage.jsx"],"sourcesContent":["import { useDispatch } from 'react-redux';\nimport { deleteContactsThunk } from '../../redux/contacts/contactsOperations';\n\nexport const ContactListItem = ({ id, name, number }) => {\n  const dispatch = useDispatch();\n\n  return (    \n    <li key={id}>\n      {name} : {number.slice(0, 13)}\n      <button\n        type=\"button\"\n        onClick={() => dispatch(deleteContactsThunk(id))}\n      >\n        Delete\n      </button>\n    </li>\n  );\n};\n","import { createSelector } from '@reduxjs/toolkit';\n\nexport const selectContacts = state => state.contacts.contactItems; \nexport const selectFilter = state => state.filter.filterQuery; \nexport const selectIsLoading = state => state.contacts.isLoading;\nexport const selectError = state => state.contacts.error;\n\nexport const selectVisibleContacts = createSelector(\n  [selectContacts, selectFilter],\n  (contacts, filterQuery) => {\n    return contacts.filter(\n      ({ name, number }) =>\n        name.toLowerCase().includes(filterQuery.toLowerCase().trim()) ||\n        number.includes(filterQuery.toLowerCase().trim())\n    );\n  }\n);\n","import { ContactListItem } from '../../components/ContactListItem/ContactListItem';\nimport { useSelector } from 'react-redux';\nimport {\n  selectIsLoading,\n  selectVisibleContacts,\n} from '../../redux/contacts/contactsSelectors';\nimport Loader from 'components/Loader/Loader';\n\nconst ContactList = () => {\n  const filteredContacts = useSelector(selectVisibleContacts);\n  const isLoading = useSelector(selectIsLoading);\n\n\n  return (\n    <>\n      <ul>\n        {isLoading && <Loader />}\n        {!isLoading &&\n          filteredContacts.map(({ id, name, number }) => (\n            <ContactListItem key={id} id={id} name={name} number={number} />\n          ))}\n      </ul>\n    </>\n  );\n};\n\nexport default ContactList;\n\n\n\n\n\n\n","const Container = ({ children }) => {\n  return <div>{children}</div>;\n};\n\nexport default Container;","import { useDispatch, useSelector } from 'react-redux';\nimport { selectFilter } from '../../redux/contacts/contactsSelectors';\nimport { changeFilter } from '../../redux/contacts/filterSlice';\n\nconst Filter = () => {\n  const dispatch = useDispatch();\n  const filterQuery = useSelector(selectFilter); \n\n  const onChangeFilter = ({ currentTarget: { value } }) => {\n    const newValue = value.toLowerCase();\n    dispatch(changeFilter(newValue));\n  };\n  return (\n    <>\n      <label>\n        <p>Find contact</p>\n        <input\n          type=\"text\"\n          name=\"filter\"\n          value={filterQuery}\n          onChange={onChangeFilter}\n          placeholder=\"Enter your contact\"\n        />\n      </label>\n    </>\n  );\n};\n\nexport default Filter;","const Notification = ({ message }) => {\n  return <h2>{message}</h2>;\n};\n\nexport default Notification;","export { urlAlphabet } from './url-alphabet/index.js'\nexport let random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nexport let customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nexport let customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nexport let nanoid = (size = 21) =>\n  crypto.getRandomValues(new Uint8Array(size)).reduce((id, byte) => {\n    byte &= 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte > 62) {\n      id += '-'\n    } else {\n      id += '_'\n    }\n    return id\n  }, '')\n","import { useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { nanoid } from 'nanoid';\nimport { selectContacts } from '../../redux/contacts/contactsSelectors';\nimport { addContactsThunk } from '../../redux/contacts/contactsOperations';\nimport { Notify } from 'notiflix';\n\nconst ContactsForm = () => {\n  const [data, setData] = useState({ name: '', number: '' });\n  const contacts = useSelector(selectContacts);\n  const dispatch = useDispatch();\n\n  const handleSubmit = event => {\n    event.preventDefault();\n\n    const isExist = contacts.some(\n      contact =>\n        contact.name.toLowerCase().trim() === data.name.toLowerCase().trim() ||\n        contact.number === data.number\n    );\n\n    if (isExist) {\n      Notify.warning(`${data.name} already EXIST.`);\n      return;\n    }\n\n    dispatch(\n      addContactsThunk({ name: data.name, number: data.number, id: nanoid() })\n    );\n    setData({ name: '', number: '' });\n  };\n\n  const handleChange = event => {\n    const { name, value } = event.target;\n\n    setData({ ...data, [name]: value });\n  };\n\n  return (\n    <>\n      <form onSubmit={handleSubmit}>\n        <p>Add contact</p>\n        <label>\n          <p>Name</p>\n          <input\n            type=\"text\"\n            name=\"name\"\n            value={data.name}\n            onChange={handleChange}\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' \\-][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n            required\n          />\n        </label>\n\n        <label>\n          <p>Number</p>\n          <input\n            type=\"tel\"\n            name=\"number\"\n            value={data.number}\n            onChange={handleChange}\n            pattern=\"\\+?\\d{1,4}?[ .\\-\\s]?\\(?\\d{1,3}?\\)?[ .\\-\\s]?\\d{1,4}[ .\\-\\s]?\\d{1,4}[ .\\-\\s]?\\d{1,9}\"\n            required\n          />\n        </label>\n\n        <button\n          type=\"submit\"\n        >\n          Add contact\n        </button>\n      </form>\n    </>\n  );\n};\n\nexport default ContactsForm;","import ContactList from 'components/ContactList/ContactList';\nimport Container from 'components/Container/Container';\nimport Filter from 'components/Filter/Filter';\nimport Loader from 'components/Loader/Loader';\nimport Notification from 'components/Notification/Notification';\nimport React, { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { getContactsThunk } from '../../redux/contacts/contactsOperations';\nimport {\n  selectContacts,\n  selectError,\n  selectIsLoading,\n} from '../../redux/contacts/contactsSelectors';\nimport ContactsForm from 'components/ContactsForm/ContactsForm';\nimport Section from 'components/Section/Section';\n\nconst ContactsPage = () => {\n  const dispatch = useDispatch();\n\n  const contacts = useSelector(selectContacts);\n  const isLoading = useSelector(selectIsLoading);\n  const error = useSelector(selectError);\n\n  useEffect(() => {\n    dispatch(getContactsThunk());\n  }, [dispatch]);\n\n  const showContacts = Array.isArray(contacts) && contacts.length > 0;\n\n  return (\n    <>\n      <Container>\n        <Section title=\"Phonebook contacts\">\n          <ContactsForm />\n          {contacts.length > 0 ? (\n            <Filter />\n          ) : (\n            <Notification message=\"Please add your contact!\" />\n          )}\n          {error !== null && <p>{error}</p>}\n          {showContacts && <ContactList />}\n          {isLoading && <Loader />}          \n        </Section>\n      </Container>\n    </>\n  );\n};\n\nexport default ContactsPage;"],"names":["ContactListItem","_ref","id","name","number","dispatch","useDispatch","_jsxs","children","slice","_jsx","type","onClick","deleteContactsThunk","selectContacts","state","contacts","contactItems","selectFilter","filter","filterQuery","selectIsLoading","isLoading","selectError","error","selectVisibleContacts","createSelector","toLowerCase","includes","trim","ContactList","filteredContacts","useSelector","_Fragment","Loader","map","Filter","value","onChange","currentTarget","newValue","changeFilter","placeholder","message","nanoid","size","arguments","length","undefined","crypto","getRandomValues","Uint8Array","reduce","byte","toString","toUpperCase","ContactsForm","data","setData","useState","handleChange","event","target","onSubmit","preventDefault","some","contact","Notify","concat","addContactsThunk","pattern","required","ContactsPage","useEffect","getContactsThunk","showContacts","Array","isArray","Container","Section","title","Notification"],"sourceRoot":""}