{"version":3,"file":"static/js/487.2b620f63.chunk.js","mappings":"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","sources":["redux/contacts/contactsSelectors.js","components/ContactList/ContactList.jsx","components/Container/Container.jsx","components/Filter/Filter.jsx","components/Notification/Notification.jsx","../node_modules/nanoid/index.browser.js","components/ContactsForm/ContactsForm.jsx","pages/ContactsPage/ContactsPage.jsx"],"sourcesContent":["import { createSelector } from '@reduxjs/toolkit';\n\nexport const selectContacts = state => state.contacts.contactItems; \nexport const selectFilter = state => state.filter.filterQuery; \nexport const selectIsLoading = state => state.contacts.isLoading;\nexport const selectError = state => state.contacts.error;\n\nexport const selectVisibleContacts = createSelector(\n  [selectContacts, selectFilter],\n  (contacts, filterQuery) => {\n    return contacts.filter(\n      ({ name, number }) =>\n        name.toLowerCase().includes(filterQuery.toLowerCase().trim()) ||\n        number.includes(filterQuery.toLowerCase().trim())\n    );\n  }\n);\n","import ContactListItem from '../../components/ContactList/ContactList';\nimport { useSelector } from 'react-redux';\nimport {\n  selectIsLoading,\n  selectVisibleContacts,\n} from '../../redux/contacts/contactsSelectors';\nimport Loader from 'components/Loader/Loader';\n\nconst ContactList = () => {\n  const filteredContacts = useSelector(selectVisibleContacts);\n  const isLoading = useSelector(selectIsLoading);\n\n\n  return (\n    <>\n      <ul>\n        {isLoading && <Loader />}\n        {!isLoading &&\n          filteredContacts.map(({ id, name, number }) => (\n            <ContactListItem key={id} id={id} name={name} number={number} />\n          ))}\n      </ul>\n    </>\n  );\n};\n\nexport default ContactList;\n\n\n\n\n\n\n","const Container = ({ children }) => {\n  return <div>{children}</div>;\n};\n\nexport default Container;","import { useDispatch, useSelector } from 'react-redux';\nimport { selectFilter } from '../../redux/contacts/contactsSelectors';\nimport { changeFilter } from '../../redux/contacts/filterSlice';\n\nconst Filter = () => {\n  const dispatch = useDispatch();\n  const filterQuery = useSelector(selectFilter); \n\n  const onChangeFilter = ({ currentTarget: { value } }) => {\n    const newValue = value.toLowerCase();\n    dispatch(changeFilter(newValue));\n  };\n  return (\n    <>\n      <label>\n        <p>Find contact</p>\n        <input\n          type=\"text\"\n          name=\"filter\"\n          value={filterQuery}\n          onChange={onChangeFilter}\n          placeholder=\"Enter your contact\"\n        />\n      </label>\n    </>\n  );\n};\n\nexport default Filter;","const Notification = ({ message }) => {\n  return <h2>{message}</h2>;\n};\n\nexport default Notification;","export { urlAlphabet } from './url-alphabet/index.js'\nexport let random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nexport let customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nexport let customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nexport let nanoid = (size = 21) =>\n  crypto.getRandomValues(new Uint8Array(size)).reduce((id, byte) => {\n    byte &= 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte > 62) {\n      id += '-'\n    } else {\n      id += '_'\n    }\n    return id\n  }, '')\n","import { useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { nanoid } from 'nanoid';\nimport { selectContacts } from '../../redux/contacts/contactsSelectors';\nimport { addContactsThunk } from '../../redux/contacts/contactsOperations';\nimport { Notify } from 'notiflix';\n\nconst ContactsForm = () => {\n  const [data, setData] = useState({ name: '', number: '' });\n  const contacts = useSelector(selectContacts);\n  const dispatch = useDispatch();\n\n  const handleSubmit = event => {\n    event.preventDefault();\n\n    const isExist = contacts.some(\n      contact =>\n        contact.name.toLowerCase().trim() === data.name.toLowerCase().trim() ||\n        contact.number === data.number\n    );\n\n    if (isExist) {\n      Notify.warning(`${data.name} already EXIST.`);\n      return;\n    }\n\n    dispatch(\n      addContactsThunk({ name: data.name, number: data.number, id: nanoid() })\n    );\n    setData({ name: '', number: '' });\n  };\n\n  const handleChange = event => {\n    const { name, value } = event.target;\n\n    setData({ ...data, [name]: value });\n  };\n\n  return (\n    <>\n      <form onSubmit={handleSubmit}>\n        <p>Add contact</p>\n        <label>\n          <p>Name</p>\n          <input\n            type=\"text\"\n            name=\"name\"\n            value={data.name}\n            onChange={handleChange}\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' \\-][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n            required\n          />\n        </label>\n\n        <label>\n          <p>Number</p>\n          <input\n            type=\"tel\"\n            name=\"number\"\n            value={data.number}\n            onChange={handleChange}\n            pattern=\"\\+?\\d{1,4}?[ .\\-\\s]?\\(?\\d{1,3}?\\)?[ .\\-\\s]?\\d{1,4}[ .\\-\\s]?\\d{1,4}[ .\\-\\s]?\\d{1,9}\"\n            required\n          />\n        </label>\n\n        <button\n          type=\"submit\"\n        >\n          Add contact\n        </button>\n      </form>\n    </>\n  );\n};\n\nexport default ContactsForm;","import ContactList from 'components/ContactList/ContactList';\nimport Container from 'components/Container/Container';\nimport Filter from 'components/Filter/Filter';\nimport Loader from 'components/Loader/Loader';\nimport Notification from 'components/Notification/Notification';\nimport React, { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { getContactsThunk } from '../../redux/contacts/contactsOperations';\nimport {\n  selectContacts,\n  selectError,\n  selectIsLoading,\n} from '../../redux/contacts/contactsSelectors';\nimport ContactsForm from 'components/ContactsForm/ContactsForm';\nimport Section from 'components/Section/Section';\n\nconst ContactsPage = () => {\n  const dispatch = useDispatch();\n\n  const contacts = useSelector(selectContacts);\n  const isLoading = useSelector(selectIsLoading);\n  const error = useSelector(selectError);\n\n  useEffect(() => {\n    dispatch(getContactsThunk());\n  }, [dispatch]);\n\n  const showContacts = Array.isArray(contacts) && contacts.length > 0;\n\n  return (\n    <>\n      <Container>\n        <Section title=\"Phonebook contacts\">\n          <ContactsForm />\n          {contacts.length > 0 ? (\n            <Filter />\n          ) : (\n            <Notification message=\"Please add your contact!\" />\n          )}\n          {error !== null && <p>{error}</p>}\n          {showContacts && <ContactList />}\n          {isLoading && <Loader />}          \n        </Section>\n      </Container>\n    </>\n  );\n};\n\nexport default ContactsPage;"],"names":["selectContacts","state","contacts","contactItems","selectFilter","filter","filterQuery","selectIsLoading","isLoading","selectError","error","selectVisibleContacts","createSelector","_ref","name","number","toLowerCase","includes","trim","ContactList","filteredContacts","useSelector","_jsx","_Fragment","children","_jsxs","Loader","map","id","ContactListItem","Filter","dispatch","useDispatch","type","value","onChange","currentTarget","newValue","changeFilter","placeholder","message","nanoid","size","arguments","length","undefined","crypto","getRandomValues","Uint8Array","reduce","byte","toString","toUpperCase","ContactsForm","data","setData","useState","handleChange","event","target","onSubmit","preventDefault","some","contact","Notify","concat","addContactsThunk","pattern","required","ContactsPage","useEffect","getContactsThunk","showContacts","Array","isArray","Container","Section","title","Notification"],"sourceRoot":""}